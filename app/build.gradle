apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs'
apply plugin: 'com.google.firebase.crashlytics'

// get the first 8 chars of the latest git commit, and use it as the version build name
def appBuildPrefix =  ['sh', '-c', 'git rev-parse --short=8 HEAD'].execute().text.trim()

android {
    compileSdkVersion 30
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "name.lmj0011.courierlocker"
        minSdkVersion 26
        targetSdkVersion 30
        versionCode 82
        versionName "2.2.0-beta07"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true

        // ref: https://stackoverflow.com/a/48674264/2445763
        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas".toString())
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            resValue("bool", "DEBUG_MODE", "false")
            resValue("string", "app_build", appBuildPrefix)
            resValue("string", "google_maps_key", (project.findProperty("GOOGLE_MAPS_API_KEY_RELEASE") ?: ""))
            resValue("string", "google_directions_key", (project.findProperty("GOOGLE_DIRECTIONS_API_KEY_DEBUG") ?: ""))
            manifestPlaceholders = [usesCleartextTraffic:"false"]
        }

        debug {
            minifyEnabled false
            resValue("bool", "DEBUG_MODE", "true")
            resValue("string", "app_build", appBuildPrefix)
            resValue("string", "google_maps_key", (project.findProperty("GOOGLE_MAPS_API_KEY_DEBUG") ?: ""))
            resValue("string", "google_directions_key", (project.findProperty("GOOGLE_DIRECTIONS_API_KEY_DEBUG") ?: ""))
            manifestPlaceholders = [usesCleartextTraffic:"true"]
        }
    }
    flavorDimensions "default"
    productFlavors {
        dev { // active development/testing
            applicationIdSuffix ".dev"
            resValue("string", "app_name", "Courier Locker (dev)")
            manifestPlaceholders = [
                    appIcon: "@mipmap/ic_launcher_dev",
                    appRoundIcon: "@mipmap/ic_launcher_dev_round",
                    appThemeLauncher: "@style/AppTheme.NoActionBar"
            ]
        }
        prod { // official release
            applicationIdSuffix ".prod"
            resValue("string", "app_name", "Courier Locker")
            manifestPlaceholders = [
                    appIcon: "@mipmap/ic_launcher",
                    appRoundIcon: "@mipmap/ic_launcher_round",
                    appThemeLauncher: "@style/AppTheme.NoActionBar"
            ]
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = "11"
    }

    buildFeatures {
        dataBinding = true
    }

    lintOptions {
        checkReleaseBuilds false
    }

    task generateDependencyListFile {
        configurations.implementation.setCanBeResolved(true)
        configurations.androidTestImplementation.setCanBeResolved(true)

        doLast {
            def str = "# auto-generated from ${this.name}; this file should be checked into version control\n"
            def resolvedImplementationConfig = configurations.implementation.resolvedConfiguration
            def resolvedAndroidTestImplementationConfig = configurations.androidTestImplementation.resolvedConfiguration

            resolvedImplementationConfig.firstLevelModuleDependencies.each { dep ->
                str += "${dep.moduleGroup}:${dep.moduleName}:${dep.moduleVersion}\n"
            }

            resolvedAndroidTestImplementationConfig.firstLevelModuleDependencies.each { dep ->
                str += "${dep.moduleGroup}:${dep.moduleName}:${dep.moduleVersion}\n"
            }

            new File(projectDir, "deps.list.txt").text = str
        }
    }

    preBuild.dependsOn(generateDependencyListFile)
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version_ktx"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version_ktx"
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'androidx.core:core-ktx:1.5.0'
    implementation 'com.google.android.material:material:1.4.0-beta01'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'com.jakewharton.timber:timber:4.7.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation "androidx.paging:paging-runtime-ktx:$paging_version"
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    // Room dependencies
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    // GSON
    implementation 'com.google.code.gson:gson:2.8.6'

    // Lifecycle-aware components
    // ref: https://developer.android.com/jetpack/androidx/releases/lifecycle
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"

    // useful for testing with mock data
    implementation 'com.github.moove-it:fakeit:v0.7'

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$version_coroutine"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$version_coroutine"

    // WorkManager
    def work_version = "2.5.0"
    implementation "androidx.work:work-runtime-ktx:$work_version"

    // HTTP lib
    implementation "com.github.kittinunf.fuel:fuel:$version_kittinunf_fuel"
    implementation "com.github.kittinunf.fuel:fuel-json:$version_kittinunf_fuel"

    // androidx.preference
    implementation "androidx.preference:preference-ktx:1.1.1"

    // An adaptation of the JSR-310 backport for Android.
    implementation 'com.jakewharton.threetenabp:threetenabp:1.2.1'

    // Firebase SDK
    implementation 'com.google.firebase:firebase-crashlytics:18.0.0'
    implementation 'com.google.firebase:firebase-analytics:19.0.0'

    // Maps SDK and FusedLocationProviderClient dependencies
    implementation 'com.google.android.gms:play-services-basement:17.6.0'
    implementation 'com.google.android.gms:play-services-base:17.6.0'
    implementation 'com.google.android.gms:play-services-gcm:17.0.0'
    implementation 'com.google.android.gms:play-services-location:18.0.0'

    // Kotson: Gson for Kotlin
    implementation 'com.github.salomonbrys.kotson:kotson:2.5.0'

    // Maps SDK for Android Utility Library
    // https://developers.google.com/maps/documentation/android-sdk/v3-client-migration#import-the-beta-compatible-utility-library
    implementation 'com.google.android.libraries.maps:maps:3.1.0-beta'
    implementation 'com.google.maps.android:android-maps-utils-v3:1.3.1'

    // dependency injection
    implementation 'org.kodein.di:kodein-di:7.0.0'

    // sqlite
    implementation 'com.github.requery:sqlite-android:3.35.4'

    // https://github.com/Zhuinden/livedata-combinetuple-kt#livedata-combinetuple-kt
    implementation 'com.github.Zhuinden:livedata-combinetuple-kt:1.2.1'
}


// ref: https://firebase.google.com/docs/android/setup#add-config-file
// Add the following line to the bottom of the file ??
apply plugin: 'com.google.gms.google-services'  // Google Play services Gradle plugin
